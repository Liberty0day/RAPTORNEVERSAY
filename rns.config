
FRAMEWORK_NAME=RNS
FRAMEWORK_VERSION=0.0.0

####################################
######### FRAMEWORK ################
####################################

FRAMEWORK(){
    clear
    printf "${BLUE}--[ ${FRAMEWORK_NAME} Version ${FRAMEWORK_VERSION}\n\n"
}

####################################
######### COLOR VALUE ##############
####################################

BLUE='\033[0;34m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

####################################
######### SHOW TASK ################
####################################

# SYNAPSE

MEMO=''
clear
TASK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/TASK"

SHOW_TASK(){

    END=$(ls $TASK_DIR |wc -l);
    START=1;

    while (($START <= $END))
    do
	    FOLDER=$(ls $TASK_DIR)
	    BUFFER=("${(f)$(echo $FOLDER)}")
	    echo "[ $START ] $(ls $TASK_DIR | awk '{if(NR=='$START') print $0}')"; 
	((START++))
    done
}

####################################
######### ADD TASK #################
####################################

ADD_TASK(){

    MEMO_TASK
	echo "[ ! ] Give the task number"
	read TASK

	VAR=$(ls $TASK_DIR |awk '{if(NR=='$TASK') print $0}')
	MEMO=("$VAR" "${MEMO[@]}")
}

####################################
######### RM TASK ##################
####################################

RM_TASK(){

	MEMO_TASK
	echo "[ ? ] give me rm name task_1.sh"
	read rm
	MEMO[(r)$rm]=()
}

####################################
######### EXEC TASK ################
####################################

EXEC_TASK(){

    echo "[+] Task execution started"
    LIST_TASK=$(MEMO_TASK) 
    END_TASK=$(echo $LIST_TASK |sed 's/ /\n/g'| wc -l);
    START_TASK=1;

    while (($START_TASK <= $END_TASK))
    do
	    echo "[ $START_TASK ] $(echo $LIST_TASK | sed 's/ /\n/g' | awk '{if(NR=='$START_TASK') print $0}')"; 
	    zsh TASK/$(echo $LIST_TASK | sed 's/ /\n/g' | awk '{if(NR=='$START_TASK') print $0}');

	((START_TASK++))
    done
}

####################################
######### CHOICE ###################
####################################

CHOICE(){

	echo "[ ! ] Do you whant add task or remove"
	echo "[ ! ] 1) Add 2) Remove 3) Execute 4) DNA inject (5 Exit"
	read AddRm
	if (($AddRm == 1))
	then
		clear
		printf "${BLUE}--[ ${FRAMEWORK_NAME} Version ${FRAMEWORK_VERSION}\n\n"
		printf "${BLUE}[ + ] Your tasks list\n\n"
		    SHOW_TASK
		printf "\n"
		printf "${BLUE}[ + ] Task already add\n\n"
		    ADD_TASK
	elif (($AddRm == 2))
	then
		clear
		    SHOW_TASK
		    RM_TASK
	elif (($AddRm == 3))
	then 
            EXEC_TASK
		read
	elif (($AddRm == 4))
	then 
	    MENU_DNA_RNA
	    MAIN
	else (($AddRm == 5))
		clear
		exit 0
	fi
}

        DNA_RESTORE
	    MAIN

####################################
######### MEMO TASK ################
####################################

MEMO_TASK(){
	echo $MEMO | sed 's/ /\n/g' | tac
}

####################################
######### MAIN #####################
####################################

MAIN(){

	while [ 1 ]
	do
		clear
		printf "${BLUE}--[ ${FRAMEWORK_NAME} Version ${FRAMEWORK_VERSION}\n\n"
		SHOW_TASK
		printf "\n"
		printf "${BLUE}[ + ] Task already add\n\n"
		MEMO_TASK
		printf "\n"
		CHOICE
	done
}

####################################
######### LOADER ###################
####################################

MENU_DNA_RNA(){

    FRAMEWORK
	printf "${BLUE}[ ? ] Do you whan use DNA inject ?\n"
    printf "${BLUE}(y Use DNA Inject (n Use RNA Inject\n"
	read answer
	if [ "$answer" != "${answer#[Yy]}" ] ;then 
	    DNA_INJECT
	    MAIN
	else
        RNA_INJECT
	    MAIN
	fi
}

LOADER(){

	FRAMEWORK
	printf "${BLUE}[ ? ] Do you whan use CRISPR ?\n"
	read answer
	if [ "$answer" != "${answer#[Yy]}" ] ;then 
	    MENU_DNA_RNA
	    MAIN
	else
        DNA_RESTORE
	    MAIN
	fi
}

####################################
######### DNA INJECT ###############
####################################

DNA_INJECT(){

	FRAMEWORK
	printf "${BLUE}[ + ] DNA List\n\n"
	START_DNA=1
	END_DNA=$(ls DNA_DB | sed 's/ /\\n/g' | wc -l | awk '{print $1}')

    while (($START_DNA <= $END_DNA))
    do
        echo  "[ $START_DNA ] $(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$START_DNA'')" 
    ((START_DNA++));
    done

    printf "\n"
    printf "${BLUE}[ ! ] Select your DNA please\n\n"
    read protein
    printf "${BLUE}[ ! ] DNA injection loading\n"
    cp DNA_DB/$(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$protein'')/* TASK/
    printf "${BLUE}[ + ] DNA succeful injection\n\n"
}

####################################
######### RNA INJECT ###############
####################################




###

SHOW_DNA_LIST(){
    printf "${BLUE}[ + ] DNA List\n\n"
	START_DNA=1
	END_DNA=$(ls DNA_DB | sed 's/ /\\n/g' | wc -l | awk '{print $1}')

    while (($START_DNA <= $END_DNA))
    do
        echo  "[ $START_DNA ] $(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$START_DNA'')" 
        
    ((START_DNA++));
    done
}

SELECT_DNA(){
    printf "\n"
    printf "${BLUE}[ ! ] Select your DNA please\n\n"
    read dna_select
    #1
}

SHOW_RNA_LIST(){
    printf "${BLUE}[ + ] RNA List\n\n"
	START_RNA=1
	END_RNA=$(ls DNA_DB/$(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$dna_select'')/ |   sed 's/ /\\n/g' | wc -l |awk '{print $1}')

    while (($START_RNA <= $END_RNA))
    do
#        echo "[ $START_RNA ] $(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$START_DNA'')" 

        echo "[ $START_RNA ] $(ls DNA_DB/$(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$dna_select'')/ |   sed 's/ /\\n/g' | awk 'NR=='$START_RNA'')"
        
    ((START_RNA++));
    done
}

SELECT_RNA(){

    printf "${BLUE}[ ! ] Select your RNA please\n\n"
    read rna_select

}

CP_RNA(){


   cp DNA_DB/$( ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$dna_select'' )/$(ls DNA_DB/$(ls DNA_DB | sed 's/ /\\n/g' | awk 'NR=='$dna_select'')/ |   sed 's/ /\\n/g' | awk 'NR=='$rna_select'')/* TASK 
    printf "${BLUE}[ + ] RNA succeful injection\n\n"
}

RNA_INJECT(){
    
    clear
    FRAMEWORK
    printf "${BLUE}[ + ] RNA Injection\n\n"
    SHOW_DNA_LIST
    SELECT_DNA
    clear
    FRAMEWORK
    printf "${BLUE}[ + ] RNA Injection\n\n"
    SHOW_RNA_LIST
    SELECT_RNA
    CP_RNA
}



####################################
######### DNA RESTORE ##############
####################################

DNA_RESTORE(){

	FRAMEWORK
	printf "${BLUE}[ ? ] Do you whant restore your DNA?\n"
	read answer
	if [ "$answer" != "${answer#[Yy]}" ] ;
    then 
	    /bin/rm -f TASK/* 	
	printf "${BLUE}[ + ] Your DNA is restored\n"
	else
	    MAIN
	fi
}
